[{"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\index.js":"1","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\store.js":"2","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reportWebVitals.js":"3","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\App.js":"4","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\cartReducers.js":"5","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\productReducers.js":"6","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\orderReducers.js":"7","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\userReducers.js":"8","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Footer.js":"9","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\HomeScreen.js":"10","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProductScreen.js":"11","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\LoginScreen.js":"12","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\CartScreen.js":"13","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProfileScreen.js":"14","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Header.js":"15","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ShippingScreen.js":"16","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\RegisterScreen.js":"17","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\PlaceOrderScreen.js":"18","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\PaymentScreen.js":"19","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\UserEditScreen.js":"20","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\UserListScreen.js":"21","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProductEditScreen.js":"22","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\OrderListScreen.js":"23","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProductListScreen.js":"24","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\OrderScreen.js":"25","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\WalletScreen.js":"26","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Loader.js":"27","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Paginate.js":"28","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Message.js":"29","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Product.js":"30","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\FormContainer.js":"31","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\cartConstants.js":"32","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Rating.js":"33","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\ProductCarousel.js":"34","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\productConstants.js":"35","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\orderConstants.js":"36","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\SearchBox.js":"37","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\CheckoutSteps.js":"38","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\userConstants.js":"39","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\cartActions.js":"40","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\productActions.js":"41","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\userActions.js":"42","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\orderActions.js":"43","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\ProductButtons.js":"44","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\CategoryCard.js":"45"},{"size":614,"mtime":1692264027266,"results":"46","hashOfConfig":"47"},{"size":2504,"mtime":1692169893362,"results":"48","hashOfConfig":"47"},{"size":375,"mtime":1691667369313,"results":"49","hashOfConfig":"47"},{"size":2359,"mtime":1691772571780,"results":"50","hashOfConfig":"47"},{"size":3667,"mtime":1692169860815,"results":"51","hashOfConfig":"47"},{"size":4249,"mtime":1691667369311,"results":"52","hashOfConfig":"47"},{"size":4276,"mtime":1691667369311,"results":"53","hashOfConfig":"47"},{"size":4100,"mtime":1691667369312,"results":"54","hashOfConfig":"47"},{"size":377,"mtime":1691678951494,"results":"55","hashOfConfig":"47"},{"size":4411,"mtime":1692305098967,"results":"56","hashOfConfig":"47"},{"size":12653,"mtime":1692213286015,"results":"57","hashOfConfig":"47"},{"size":2629,"mtime":1691667369315,"results":"58","hashOfConfig":"47"},{"size":6077,"mtime":1692263259524,"results":"59","hashOfConfig":"47"},{"size":6947,"mtime":1691667369320,"results":"60","hashOfConfig":"47"},{"size":4237,"mtime":1692528928332,"results":"61","hashOfConfig":"47"},{"size":3421,"mtime":1691774917892,"results":"62","hashOfConfig":"47"},{"size":4038,"mtime":1691667369321,"results":"63","hashOfConfig":"47"},{"size":6742,"mtime":1691767480053,"results":"64","hashOfConfig":"47"},{"size":3975,"mtime":1692191861879,"results":"65","hashOfConfig":"47"},{"size":4022,"mtime":1691667369322,"results":"66","hashOfConfig":"47"},{"size":3602,"mtime":1691667369323,"results":"67","hashOfConfig":"47"},{"size":8141,"mtime":1691667369319,"results":"68","hashOfConfig":"47"},{"size":3632,"mtime":1691667369316,"results":"69","hashOfConfig":"47"},{"size":5132,"mtime":1691667369319,"results":"70","hashOfConfig":"47"},{"size":10124,"mtime":1691667369316,"results":"71","hashOfConfig":"47"},{"size":508,"mtime":1691777406810,"results":"72","hashOfConfig":"47"},{"size":479,"mtime":1691667369299,"results":"73","hashOfConfig":"47"},{"size":887,"mtime":1691667369300,"results":"74","hashOfConfig":"47"},{"size":240,"mtime":1691667369299,"results":"75","hashOfConfig":"47"},{"size":2202,"mtime":1692522779951,"results":"76","hashOfConfig":"47"},{"size":394,"mtime":1691667369297,"results":"77","hashOfConfig":"47"},{"size":515,"mtime":1692169733835,"results":"78","hashOfConfig":"47"},{"size":1957,"mtime":1691667369302,"results":"79","hashOfConfig":"47"},{"size":1459,"mtime":1691775185852,"results":"80","hashOfConfig":"47"},{"size":1538,"mtime":1691667369305,"results":"81","hashOfConfig":"47"},{"size":1270,"mtime":1691667369305,"results":"82","hashOfConfig":"47"},{"size":1006,"mtime":1691754354818,"results":"83","hashOfConfig":"47"},{"size":1645,"mtime":1691667369296,"results":"84","hashOfConfig":"47"},{"size":1514,"mtime":1691667369306,"results":"85","hashOfConfig":"47"},{"size":3411,"mtime":1692169870484,"results":"86","hashOfConfig":"47"},{"size":6191,"mtime":1691667369260,"results":"87","hashOfConfig":"47"},{"size":7699,"mtime":1691667369261,"results":"88","hashOfConfig":"47"},{"size":6285,"mtime":1691667369260,"results":"89","hashOfConfig":"47"},{"size":2399,"mtime":1692263231906,"results":"90","hashOfConfig":"47"},{"size":747,"mtime":1692285183680,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1fz78uj",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"94"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"94"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"94"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"94"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\index.js",[],["202","203"],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\store.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reportWebVitals.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\App.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\cartReducers.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\productReducers.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\orderReducers.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\reducers\\userReducers.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Footer.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\HomeScreen.js",["204"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport Product from '../components/Product';\r\nimport Loader from '../components/Loader';\r\nimport Message from '../components/Message';\r\nimport Paginate from '../components/Paginate';\r\nimport CategoryCard from '../components/CategoryCard';\r\nimport ProductCarousel from '../components/ProductCarousel';\r\nimport { listProducts } from '../actions/productActions';\r\n\r\nfunction HomeScreen({ history }) {\r\n  const dispatch = useDispatch();\r\n  const productList = useSelector((state) => state.productList);\r\n  const { error, loading, products, page, pages } = productList;\r\n\r\n  let keyword = history.location.search;\r\n\r\n  useEffect(() => {\r\n    dispatch(listProducts(keyword));\r\n  }, [dispatch, keyword]);\r\n\r\n  const categories = [\r\n    {\r\n      id: 1,\r\n      iconSrc:\r\n        'https://cdnprod.mafretailproxy.com/assets/images/Best_Deals_EN_2x_e8c999f7bd.png',\r\n      title: 'Best Deals',\r\n    },\r\n    {\r\n      id: 2,\r\n      iconSrc:\r\n        'https://cdnprod.mafretailproxy.com/assets/images/3_Fruits_and_Vegetable_3d4bb7ebf0.png',\r\n      title: 'Fruits & Vegetables',\r\n    },\r\n    {\r\n      id: 3,\r\n      iconSrc:\r\n        'https://cdnprod.mafretailproxy.com/assets/images/4_Meat_and_Poultry_75f53eba5c.png',\r\n      title: 'Meat & Poultry',\r\n    },\r\n    {\r\n      id: 4,\r\n      iconSrc:\r\n        'https://cdnprod.mafretailproxy.com/assets/images/5_Dairy_and_Eggs_94e4027d93.png',\r\n      title: 'Dairy & Eggs',\r\n    },\r\n    {\r\n      id: 5,\r\n      iconSrc:\r\n        'https://cdnprod.mafretailproxy.com/assets/images/7_Cooking_Ingredients_49a59a92c4.png',\r\n      title: 'Cooking Essentials',\r\n    },\r\n    {\r\n      id: 6,\r\n      iconSrc:\r\n        'https://cdnprod.mafretailproxy.com/assets/images/6_Rice_Pulses_and_Pasta_5aae2c4170.png',\r\n      title: 'Rice & Pasta',\r\n    },\r\n    // {\r\n    //     id: 7,\r\n    //     iconSrc:\r\n    //       'https://cdnprod.mafretailproxy.com/assets/images/9_Frozen_Food_68d047637c.png',\r\n    //     title: 'Frozen Food',\r\n    //   },\r\n    //   {\r\n    //     id: 8,\r\n    //     iconSrc:\r\n    //       'https://cdnprod.mafretailproxy.com/assets/images/16_Home_and_Garden_e078cf8ff5.png',\r\n    //     title: 'Home & Garden',\r\n    //   },\r\n    //   {\r\n    //     id: 9,\r\n    //     iconSrc:\r\n    //       'https://cdnprod.mafretailproxy.com/assets/images/15_Smartphones_and_Electronics_7b54200566.png',\r\n    //     title: 'Mobiles & Electronics',\r\n    //   },\r\n    //   {\r\n    //     id: 10,\r\n    //     iconSrc:\r\n    //       'https://cdnprod.mafretailproxy.com/assets/images/14_Appliances_5dedf63667.png',\r\n    //     title: 'Appliances',\r\n    //   },\r\n    //   {\r\n    //     id:11,\r\n    //     iconSrc:\r\n    //       'https://cdnprod.mafretailproxy.com/assets/images/13_Baby_Care_48174bb941.png',\r\n    //     title: 'Baby Products',\r\n    //   },\r\n    //   {\r\n    //     id: 12,\r\n    //     iconSrc:\r\n    //       'https://cdnprod.mafretailproxy.com/assets/images/11_Cleaning_and_Household_13916df221.png',\r\n    //     title: 'Cleaning & Laundry',\r\n    //   },\r\n    // Add more categories as needed\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      {!keyword && <ProductCarousel />}\r\n\r\n      <h1 className='text-capitalize'>Categories: </h1>\r\n\r\n      <Row>\r\n        {categories.map((category) => (\r\n          <Col xs={6} sm={4} md={3} xl={2}>\r\n            <CategoryCard\r\n              iconSrc={category.iconSrc}\r\n              title={category.title}\r\n            />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n      <div style={{width:'100%', height:'1px', backgroundColor:'grey', marginTop:'10px',marginBottom:'10px'}}></div>\r\n\r\n      <h1 className='text-capitalize'>Latest Products</h1>\r\n      {loading ? (\r\n        <Loader />\r\n      ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n      ) : (\r\n        <div>\r\n          <Row>\r\n            {products.map((product) => (\r\n              <Col\r\n                key={product._id}\r\n                sm={12}\r\n                md={6}\r\n                lg={4}\r\n                xl={3}>\r\n                <Product product={product} />\r\n              </Col>\r\n            ))}\r\n          </Row>\r\n\r\n          <Paginate\r\n            page={page}\r\n            pages={pages}\r\n            keyword={keyword}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProductScreen.js",["205","206"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form, ButtonGroup,InputGroup } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport ProductButtons from '../components/ProductButtons'\r\n// import { addToCart, minusCart,removeFromCart } from '../actions/cartActions'\r\nimport { listProductDetails, createProductReview } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductScreen({ match, history }) {\r\n    const [qty, setQty] = useState(1)\r\n    const [rating, setRating] = useState(0)\r\n    const [comment, setComment] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n\r\n    const cart = useSelector(state => state.cart);\r\n    const { cartItems } = cart;\r\n  \r\n    const itemInCart = cartItems.find(item => item.product === Number(match.params.id));\r\n    // console.log(\"item in cart\", itemInCart.qty)\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\r\n    const {\r\n        loading: loadingProductReview,\r\n        error: errorProductReview,\r\n        success: successProductReview,\r\n    } = productReviewCreate\r\n\r\n    useEffect(() => {\r\n        if (successProductReview) {\r\n            setRating(0)\r\n            setComment('')\r\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\r\n        }\r\n\r\n        dispatch(listProductDetails(match.params.id))\r\n\r\n    }, [dispatch, match, successProductReview])\r\n\r\n    // const addToCartHandler = () => {\r\n    //     // history.push(`/cart/${match.params.id}?qty=${qty}`)\r\n    //     dispatch(addToCart(match.params.id, Number(qty)));\r\n    // }\r\n\r\n    // const minusCartHandler = () => {\r\n    //     // delete one item at once\r\n    //     dispatch(minusCart(match.params.id))\r\n    // }\r\n\r\n    // const removeItemHandler =() => {\r\n    //     dispatch(removeFromCart(Number(match.params.id)))\r\n        \r\n    // }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(createProductReview(\r\n            match.params.id, {\r\n            rating,\r\n            comment\r\n        }\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/' className='btn btn-light my-3'>Go Back</Link>\r\n            {loading ?\r\n                <Loader />\r\n                : error\r\n                    ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <div>\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <Image src={product.image} alt={product.name} fluid />\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <ListGroup variant=\"flush\">\r\n                                        <ListGroup.Item>\r\n                                            <h3>{product.name}</h3>\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            Price: ${product.price}\r\n                                        </ListGroup.Item>\r\n\r\n                                        <ListGroup.Item>\r\n                                            Description: {product.description}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col>\r\n\r\n\r\n                                <Col md={3}>\r\n                                    <Card>\r\n                                        <ListGroup variant='flush'>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Price:</Col>\r\n                                                    <Col>\r\n                                                        <strong>${product.price}</strong>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Status:</Col>\r\n                                                    <Col>\r\n                                                        {product.countInStock > 0 ? <p className='text-success'>In Stock</p> : <p className='text-warning'>Out of Stock</p>}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n\r\n                                            {product.countInStock > 0 && (\r\n                                                <ListGroup.Item>\r\n                                                    <Row>\r\n                                                        <Col>Qty</Col>\r\n                                                        <Col xs='auto' className='my-1'>\r\n                                                            <Form.Control\r\n                                                                as=\"select\"\r\n                                                                value={qty}\r\n                                                                onChange={(e) => setQty(e.target.value)}\r\n                                                            >\r\n                                                                {\r\n\r\n                                                                    [...Array(product.countInStock).keys()].map((x) => (\r\n                                                                        <option key={x + 1} value={x + 1}>\r\n                                                                            {x + 1}\r\n                                                                        </option>\r\n                                                                    ))\r\n                                                                }\r\n\r\n                                                            </Form.Control>\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </ListGroup.Item>\r\n                                            )}\r\n\r\n\r\n                                            <ListGroup.Item>\r\n                                            \r\n                                            <ProductButtons\r\n                                                itemInCart={itemInCart}\r\n                                                product={product}\r\n                                                // qty={qty}\r\n                                                // addToCartHandler={addToCartHandler}\r\n                                                // minusCartHandler={minusCartHandler}\r\n                                                // removeItemHandler={removeItemHandler}\r\n                                            />\r\n                                            </ListGroup.Item>\r\n                                        </ListGroup>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <h4>Reviews</h4>\r\n                                    {product.reviews.length === 0 && <Message variant='info'>No Reviews</Message>}\r\n\r\n                                    <ListGroup variant='flush'>\r\n                                        {product.reviews.map((review) => (\r\n                                            <ListGroup.Item key={review._id}>\r\n                                                <strong>{review.name}</strong>\r\n                                                <Rating value={review.rating} color='#f8e825' />\r\n                                                <p>{review.createdAt.substring(0, 10)}</p>\r\n                                                <p>{review.comment}</p>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n\r\n                                        <ListGroup.Item>\r\n                                            <h4>Write a review</h4>\r\n\r\n                                            {loadingProductReview && <Loader />}\r\n                                            {successProductReview && <Message variant='success'>Review Submitted</Message>}\r\n                                            {errorProductReview && <Message variant='danger'>{errorProductReview}</Message>}\r\n\r\n                                            {userInfo ? (\r\n                                                <Form onSubmit={submitHandler}>\r\n                                                    <Form.Group controlId='rating'>\r\n                                                        <Form.Label>Rating</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='select'\r\n                                                            value={rating}\r\n                                                            onChange={(e) => setRating(e.target.value)}\r\n                                                        >\r\n                                                            <option value=''>Select...</option>\r\n                                                            <option value='1'>1 - Poor</option>\r\n                                                            <option value='2'>2 - Fair</option>\r\n                                                            <option value='3'>3 - Good</option>\r\n                                                            <option value='4'>4 - Very Good</option>\r\n                                                            <option value='5'>5 - Excellent</option>\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group controlId='comment'>\r\n                                                        <Form.Label>Review</Form.Label>\r\n                                                        <Form.Control\r\n                                                            as='textarea'\r\n                                                            row='5'\r\n                                                            value={comment}\r\n                                                            onChange={(e) => setComment(e.target.value)}\r\n                                                        ></Form.Control>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Button\r\n                                                        disabled={loadingProductReview}\r\n                                                        type='submit'\r\n                                                        variant='primary'\r\n                                                    >\r\n                                                        Submit\r\n                                                    </Button>\r\n\r\n                                                </Form>\r\n                                            ) : (\r\n                                                    <Message variant='info'>Please <Link to='/login'>login</Link> to write a review</Message>\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    )\r\n\r\n            }\r\n\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\LoginScreen.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\CartScreen.js",["207","208"],"import React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col, ListGroup, Image, Form, Button, Card } from 'react-bootstrap'\r\nimport Message from '../components/Message'\r\nimport { addToCart, removeFromCart, listCartItems } from '../actions/cartActions'\r\nimport ProductButtons from '../components/ProductButtons'\r\n\r\nfunction CartScreen({ match, location, history }) {\r\n    const productId = match.params.id\r\n    // const qty = location.search ? Number(location.search.split('=')[1]) : 1\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { cartItems } = cart\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n    \r\n    useEffect(() => {\r\n        \r\n        if (productId) {\r\n            dispatch(addToCart(productId, 1))\r\n        }\r\n    }, [dispatch, productId])\r\n\r\n\r\n    const removeFromCartHandler = (id) => {\r\n        dispatch(removeFromCart(id))\r\n    }\r\n\r\n    const checkoutHandler = () => {\r\n        history.push('/login?redirect=shipping')\r\n    }\r\n    // const handleDispach =() => {\r\n    //     dispatch(listCartItems())\r\n    // }\r\n\r\n    return (\r\n        <Row>\r\n            {/* <Button onClick={handleDispach} className='btn'>dispatch</Button> */}\r\n            <Col md={8}>\r\n                <h1>Shopping Cart</h1>\r\n                {cartItems.length === 0 ? (\r\n                    <Message variant='info'>\r\n                        Your cart is empty <Link to='/'>Go Back</Link>\r\n                    </Message>\r\n                ) : (\r\n                        <ListGroup variant='flush'>\r\n                            {cartItems.map(item => (\r\n                                <ListGroup.Item key={item.product}>\r\n                                    <Row>\r\n                                        <Col md={2}>\r\n                                            <Image src={item.image} alt={item.name} fluid rounded />\r\n                                        </Col>\r\n                                        <Col md={3}>\r\n                                            <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                        </Col>\r\n\r\n                                        <Col md={2}>\r\n                                            ${item.price}\r\n                                        </Col>\r\n\r\n                                        {/* <Col md={3}>\r\n                                            <Form.Control\r\n                                                as=\"select\"\r\n                                                value={item.qty}\r\n                                                onChange={(e) => dispatch(addToCart(item.product, Number(e.target.value)))}\r\n                                            >\r\n                                                {\r\n\r\n                                                    [...Array(item.countInStock).keys()].map((x) => (\r\n                                                        <option key={x + 1} value={x + 1}>\r\n                                                            {x + 1}\r\n                                                        </option>\r\n                                                    ))\r\n                                                }\r\n\r\n                                            </Form.Control>\r\n                                        </Col> */}\r\n                                        <Col md={2}>\r\n                                            <ProductButtons \r\n                                            product={{ ...item, _id: item.product }}\r\n                                            itemInCart={item}\r\n                                            plusClass=\" bg-light text-dark btn-sm border-0\"\r\n                                            minusClass=\"bg-light text-dark btn-sm border-0\"\r\n                                            trashIcon=\"minus\"\r\n\r\n                                            />\r\n                                        </Col>\r\n\r\n                                        <Col md={1}>\r\n                                            <Button\r\n                                            className='btn-sm'\r\n                                                type='button'\r\n                                                variant='light'\r\n                                                onClick={() => removeFromCartHandler(item.product)}\r\n                                            >\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </ListGroup.Item>\r\n                            ))}\r\n                        </ListGroup>\r\n                    )}\r\n            </Col>\r\n\r\n            <Col md={4}>\r\n                <Card>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) items</h2>\r\n                            ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed(2)}\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n\r\n                    <ListGroup.Item>\r\n                        <Button\r\n                            type='button'\r\n                            className='btn-block btn-success '\r\n                            disabled={cartItems.length === 0 }\r\n                            onClick={checkoutHandler}\r\n                            // style={{backgroundColor:\"#29ab99\"}}\r\n                        >\r\n                            {userInfo? \r\n                            \"Proceed To Checkout\": \"Login to proceed\"\r\n                            }\r\n                        </Button>\r\n                        \r\n                    </ListGroup.Item>\r\n\r\n\r\n                </Card>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default CartScreen","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProfileScreen.js",["209","210"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nfunction ProfileScreen({ history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderListMy = useSelector(state => state.orderListMy)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderListMy\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        } else {\r\n            if (!user || !user.name || success || userInfo._id !== user._id) {\r\n                dispatch({ type: USER_UPDATE_PROFILE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, history, userInfo, user, success])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n            setMessage('')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter name'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Enter Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>Confirm Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant='primary'>\r\n                        Update\r\n                </Button>\r\n\r\n                </Form>\r\n            </Col>\r\n\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                            <Table striped responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>Date</th>\r\n                                        <th>Total</th>\r\n                                        <th>Paid</th>\r\n                                        <th>Delivered</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {orders.map(order => (\r\n                                        <tr key={order._id}>\r\n                                            <td>{order._id}</td>\r\n                                            <td>{order.createdAt.substring(0, 10)}</td>\r\n                                            <td>${order.totalPrice}</td>\r\n                                            <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\r\n                                                <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n                                            <td>\r\n                                                <LinkContainer to={`/order/${order._id}`}>\r\n                                                    <Button className='btn-sm'>Details</Button>\r\n                                                </LinkContainer>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                        )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Header.js",["211","212","213"],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ShippingScreen.js",["214"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\n\r\nfunction ShippingScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        history.push('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter city'\r\n                        value={city ? city : ''}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postalCode'>\r\n                    <Form.Label>Postal Code</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter postal code'\r\n                        value={postalCode ? postalCode : ''}\r\n                        onChange={(e) => setPostalCode(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter country'\r\n                        value={country ? country : ''}\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <div\r\n    className='mt-5'\r\n        style={{\r\n          background: 'black',\r\n          height: '3px',\r\n        }}\r\n      />\r\n                <Button className='mt-5' type='submit' variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\RegisterScreen.js",["215"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen({ location, history }) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            history.push(redirect)\r\n        }\r\n    }, [history, userInfo, redirect])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage('Passwords do not match')\r\n        } else {\r\n            dispatch(register(name, email, password))\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Sign In</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter name'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Enter Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Confirm Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    >\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Register\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            <Row className='py-3'>\r\n                <Col>\r\n                    Have an Account? <Link\r\n                        to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                        </Link>\r\n                </Col>\r\n            </Row>\r\n        </FormContainer >\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\PlaceOrderScreen.js",["216","217"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\nfunction PlaceOrderScreen({ history }) {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    // cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    // cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    // cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\r\n\r\n    // cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n\r\n    if (!cart.paymentMethod) {\r\n        history.push('/payment')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            history.push(`/order/${order._id}`)\r\n            dispatch({ type: ORDER_CREATE_RESET })\r\n        }\r\n    }, [success, history])\r\n\r\n    const placeOrder = () => {\r\n        dispatch(createOrder({\r\n            orderItems: cart.cartItems,\r\n            shippingAddress: cart.shippingAddress,\r\n            paymentMethod: cart.paymentMethod,\r\n            itemsPrice: cart.itemsPrice,\r\n            shippingPrice: cart.shippingPrice,\r\n            taxPrice: cart.taxPrice,\r\n            totalPrice: cart.totalPrice,\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant='flush'>\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address},  {cart.shippingAddress.city}\r\n                                {'  '}\r\n                                {cart.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {cart.shippingAddress.country}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\r\n                                Your cart is empty\r\n                            </Message> : (\r\n                                    <ListGroup variant='flush'>\r\n                                        {cart.cartItems.map((item, index) => (\r\n                                            <ListGroup.Item key={index}>\r\n                                                <Row>\r\n                                                    <Col md={1}>\r\n                                                        <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                    </Col>\r\n\r\n                                                    <Col md={4}>\r\n                                                        {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        ))}\r\n                                    </ListGroup>\r\n                                )}\r\n                        </ListGroup.Item>\r\n\r\n                    </ListGroup>\r\n\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant='flush'>\r\n                            <ListGroup.Item>\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>${cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>${cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>${cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>${cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant='danger'>{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                <Button\r\n                                    type='button'\r\n                                    className='btn-block'\r\n                                    disabled={cart.cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\PaymentScreen.js",["218","219","220"],"import React, { useState, useEffect } from 'react'\r\nimport { Form, Button, Col ,ToggleButton, ToggleButtonGroup, Overlay, Tooltip, OverlayTrigger} from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { savePaymentMethod } from '../actions/cartActions'\r\n\r\nfunction PaymentScreen({ history }) {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\r\n\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\r\n\r\n    const handlePaymentMethodChange = (method) => {\r\n        setPaymentMethod(method);\r\n      };\r\n\r\n\r\n    //   get total to validate wallet\r\n    \r\n    \r\n    \r\n\r\n    if (!shippingAddress.address) {\r\n        history.push('/shipping')\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(savePaymentMethod(paymentMethod))\r\n        console.log(paymentMethod)\r\n        history.push('/placeorder')\r\n    }\r\n    const walletBal = 5\r\n\r\n\r\n\r\n    return (\r\n        \r\n        \r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 step3 />\r\n            \r\n            <h4 className='mb-2'>total price: {cart.totalPrice}<small className='text-warning'>( including tax)</small></h4>\r\n            <Form onSubmit={submitHandler}>\r\n            <Form.Group as={Col} controlId='paymentMethod' >\r\n      <Form.Label as='legend'>Select Method</Form.Label>\r\n      <Col>\r\n        <ToggleButtonGroup\r\n        orientation=\"vertical\"\r\n          type='radio'\r\n          name='paymentMethod'\r\n          value={paymentMethod}\r\n          onChange={handlePaymentMethodChange}\r\n        //   vertical \r\n\r\n          className='border rounded p-3 w-300 ' \r\n          \r\n        >\r\n         <ToggleButton\r\n            \r\n            value='PayPal'\r\n            className={paymentMethod === 'PayPal' ? 'btn btn-info mr-2' : 'mr-2 btn border border-info btn-light'}\r\n          >\r\n            PayPal or Credit Card\r\n          </ToggleButton>\r\n          <ToggleButton\r\n          \r\n            value='wallet'\r\n            className={paymentMethod === 'wallet' ? 'btn btn-info ml-2' : 'ml-2 btn border border-info btn-light'}\r\n          >\r\n            Wallet\r\n          </ToggleButton>\r\n        </ToggleButtonGroup>\r\n          {paymentMethod=== \"wallet\" && <p className={walletBal < cart.totalPrice ? \"text-danger\" : \"text-success\"}>{walletBal<cart.totalPrice ? `insufficient balance of $${walletBal}`  : `your balance is: $${walletBal}` }</p>}\r\n      </Col>\r\n    </Form.Group>\r\n        \r\n    <div\r\n    className='mt-5'\r\n        style={{\r\n          background: 'lightgrey ',\r\n          height: '2px',\r\n        }}\r\n      />\r\n      <div className='mt-4'>\r\n\r\n          {paymentMethod===\"wallet\"&&walletBal<cart.totalPrice ? \r\n          <OverlayTrigger  placement=\"auto\"  overlay={<p className=\"ml-1 text-danger \"  id=\"tooltip-disabled\">Wallet Can not be used!! </p>}>\r\n          <span className=\"d-inline-block \">\r\n                <Button  style={{ pointerEvents: 'none' }} disabled={paymentMethod===\"wallet\"&&walletBal<cart.totalPrice} type='submit'  variant='primary'>\r\n                    Continue\r\n                </Button>\r\n            </span>\r\n        </OverlayTrigger>\r\n        :\r\n                <Button   disabled={paymentMethod===\"wallet\"&&walletBal<cart.totalPrice} type='submit'  variant='primary'>\r\n                    Continue\r\n                </Button>\r\n}\r\n      </div>\r\n            </Form>\r\n        </FormContainer>\r\n\r\n    )\r\n}\r\n\r\nexport default PaymentScreen\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\UserEditScreen.js",["221"],"import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen({ match, history }) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n    useEffect(() => {\r\n\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            history.push('/admin/userlist')\r\n        } else {\r\n\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n\r\n    }, [user, userId, successUpdate, history])\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/userlist'>\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n\r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control\r\n\r\n                                    type='name'\r\n                                    placeholder='Enter name'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}\r\n                                >\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isadmin'>\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                >\r\n                                </Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button type='submit' variant='primary'>\r\n                                Update\r\n                        </Button>\r\n\r\n                        </Form>\r\n                    )}\r\n\r\n            </FormContainer >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default UserEditScreen","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\UserListScreen.js",["222"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listUsers, deleteUser } from '../actions/userActions'\r\n\r\nfunction UserListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete } = userDelete\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, successDelete, userInfo])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this user?')) {\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Users</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>NAME</th>\r\n                                    <th>EMAIL</th>\r\n                                    <th>ADMIN</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {users.map(user => (\r\n                                    <tr key={user._id}>\r\n                                        <td>{user._id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.isAdmin ? (\r\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    <i className='fas fa-edit'></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                                <i className='fas fa-trash'></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProductEditScreen.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\OrderListScreen.js",["223"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listOrders } from '../actions/orderActions'\r\n\r\nfunction OrderListScreen({ history }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const orderList = useSelector(state => state.orderList)\r\n    const { loading, error, orders } = orderList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listOrders())\r\n        } else {\r\n            history.push('/login')\r\n        }\r\n\r\n    }, [dispatch, history, userInfo])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Orders</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>USER</th>\r\n                                    <th>DATE</th>\r\n                                    <th>Total</th>\r\n                                    <th>PAID</th>\r\n                                    <th>DELIVERED</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {orders.map(order => (\r\n                                    <tr key={order._id}>\r\n                                        <td>{order._id}</td>\r\n                                        <td>{order.user && order.user.name}</td>\r\n                                        <td>{order.createdAt.substring(0, 10)}</td>\r\n                                        <td>${order.totalPrice}</td>\r\n\r\n                                        <td>{order.isPaid ? (\r\n                                            order.paidAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>{order.isDelivered ? (\r\n                                            order.deliveredAt.substring(0, 10)\r\n                                        ) : (\r\n                                                <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n                                            )}\r\n                                        </td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/order/${order._id}`}>\r\n                                                <Button variant='light' className='btn-sm'>\r\n                                                    Details\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OrderListScreen","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\ProductListScreen.js",["224"],"import React, { useState, useEffect } from 'react'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport Paginate from '../components/Paginate'\r\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen({ history, match }) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products, pages, page } = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\r\n\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    let keyword = history.location.search\r\n    useEffect(() => {\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo.isAdmin) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            history.push(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts(keyword))\r\n        }\r\n\r\n    }, [dispatch, history, userInfo, successDelete, successCreate, createdProduct, keyword])\r\n\r\n\r\n    const deleteHandler = (id) => {\r\n\r\n        if (window.confirm('Are you sure you want to delete this product?')) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n\r\n                <Col className='text-right'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i> Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\r\n\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant='danger'>{error}</Message>)\r\n                    : (\r\n                        <div>\r\n                            <Table striped bordered hover responsive className='table-sm'>\r\n                                <thead>\r\n                                    <tr>\r\n                                        <th>ID</th>\r\n                                        <th>NAME</th>\r\n                                        <th>PRICE</th>\r\n                                        <th>CATEGORY</th>\r\n                                        <th>BRAND</th>\r\n                                        <th></th>\r\n                                    </tr>\r\n                                </thead>\r\n\r\n                                <tbody>\r\n                                    {products.map(product => (\r\n                                        <tr key={product._id}>\r\n                                            <td>{product._id}</td>\r\n                                            <td>{product.name}</td>\r\n                                            <td>${product.price}</td>\r\n                                            <td>{product.category}</td>\r\n                                            <td>{product.brand}</td>\r\n\r\n                                            <td>\r\n                                                <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                                    <Button variant='light' className='btn-sm'>\r\n                                                        <i className='fas fa-edit'></i>\r\n                                                    </Button>\r\n                                                </LinkContainer>\r\n\r\n                                                <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                                    <i className='fas fa-trash'></i>\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </Table>\r\n                            <Paginate pages={pages} page={page} isAdmin={true} />\r\n                        </div>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\OrderScreen.js",["225"],"import React, { useState, useEffect } from 'react'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { PayPalButton } from 'react-paypal-button-v2'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\r\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\r\n\r\nfunction OrderScreen({ match, history }) {\r\n    const orderId = match.params.id\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const [sdkReady, setSdkReady] = useState(false)\r\n\r\n    const orderDetails = useSelector(state => state.orderDetails)\r\n    const { order, error, loading } = orderDetails\r\n\r\n    const orderPay = useSelector(state => state.orderPay)\r\n    const { loading: loadingPay, success: successPay } = orderPay\r\n\r\n    const orderDeliver = useSelector(state => state.orderDeliver)\r\n    const { loading: loadingDeliver, success: successDeliver } = orderDeliver\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n\r\n    if (!loading && !error) {\r\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    }\r\n\r\n\r\n    const addPayPalScript = () => {\r\n        const script = document.createElement('script')\r\n        script.type = 'text/javascript'\r\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn'\r\n        script.async = true\r\n        script.onload = () => {\r\n            setSdkReady(true)\r\n        }\r\n        document.body.appendChild(script)\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (!userInfo) {\r\n            history.push('/login')\r\n        }\r\n\r\n        if (!order || successPay || order._id !== Number(orderId) || successDeliver) {\r\n            dispatch({ type: ORDER_PAY_RESET })\r\n            dispatch({ type: ORDER_DELIVER_RESET })\r\n\r\n            dispatch(getOrderDetails(orderId))\r\n        } else if (!order.isPaid) {\r\n            if (!window.paypal) {\r\n                addPayPalScript()\r\n            } else {\r\n                setSdkReady(true)\r\n            }\r\n        }\r\n    }, [dispatch, order, orderId, successPay, successDeliver])\r\n\r\n\r\n    const successPaymentHandler = (paymentResult) => {\r\n        dispatch(payOrder(orderId, paymentResult))\r\n    }\r\n\r\n    const deliverHandler = () => {\r\n        dispatch(deliverOrder(order))\r\n    }\r\n\r\n    return loading ? (\r\n        <Loader />\r\n    ) : error ? (\r\n        <Message variant='danger'>{error}</Message>\r\n    ) : (\r\n                <div>\r\n                    <h1>Order: {order.Id}</h1>\r\n                    <Row>\r\n                        <Col md={8}>\r\n                            <ListGroup variant='flush'>\r\n                                <ListGroup.Item>\r\n                                    <h2>Shipping</h2>\r\n                                    <p><strong>Name: </strong> {order.user.name}</p>\r\n                                    <p><strong>Email: </strong><a href={`mailto:${order.user.email}`}>{order.user.email}</a></p>\r\n                                    <p>\r\n                                        <strong>Shipping: </strong>\r\n                                        {order.shippingAddress.address},  {order.shippingAddress.city}\r\n                                        {'  '}\r\n                                        {order.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                        {order.shippingAddress.country}\r\n                                    </p>\r\n\r\n                                    {order.isDelivered ? (\r\n                                        <Message variant='success'>Delivered on {order.deliveredAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Delivered</Message>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Payment Method</h2>\r\n                                    <p>\r\n                                        <strong>Method: </strong>\r\n                                        {order.paymentMethod}\r\n                                    </p>\r\n                                    {order.isPaid ? (\r\n                                        <Message variant='success'>Paid on {order.paidAt}</Message>\r\n                                    ) : (\r\n                                            <Message variant='warning'>Not Paid</Message>\r\n                                        )}\r\n\r\n                                </ListGroup.Item>\r\n\r\n                                <ListGroup.Item>\r\n                                    <h2>Order Items</h2>\r\n                                    {order.orderItems.length === 0 ? <Message variant='info'>\r\n                                        Order is empty\r\n                            </Message> : (\r\n                                            <ListGroup variant='flush'>\r\n                                                {order.orderItems.map((item, index) => (\r\n                                                    <ListGroup.Item key={index}>\r\n                                                        <Row>\r\n                                                            <Col md={1}>\r\n                                                                <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                            </Col>\r\n\r\n                                                            <Col>\r\n                                                                <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                            </Col>\r\n\r\n                                                            <Col md={4}>\r\n                                                                {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </ListGroup.Item>\r\n                                                ))}\r\n                                            </ListGroup>\r\n                                        )}\r\n                                </ListGroup.Item>\r\n\r\n                            </ListGroup>\r\n\r\n                        </Col>\r\n\r\n                        <Col md={4}>\r\n                            <Card>\r\n                                <ListGroup variant='flush'>\r\n                                    <ListGroup.Item>\r\n                                        <h2>Order Summary</h2>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Items:</Col>\r\n                                            <Col>${order.itemsPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Shipping:</Col>\r\n                                            <Col>${order.shippingPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Tax:</Col>\r\n                                            <Col>${order.taxPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n                                    <ListGroup.Item>\r\n                                        <Row>\r\n                                            <Col>Total:</Col>\r\n                                            <Col>${order.totalPrice}</Col>\r\n                                        </Row>\r\n                                    </ListGroup.Item>\r\n\r\n\r\n                                    {!order.isPaid && (\r\n                                        <ListGroup.Item>\r\n                                            {loadingPay && <Loader />}\r\n\r\n                                            {!sdkReady ? (\r\n                                                <Loader />\r\n                                            ) : (\r\n                                                    <PayPalButton\r\n                                                        amount={order.totalPrice}\r\n                                                        onSuccess={successPaymentHandler}\r\n                                                    />\r\n                                                )}\r\n                                        </ListGroup.Item>\r\n                                    )}\r\n                                </ListGroup>\r\n                                {loadingDeliver && <Loader />}\r\n                                {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\r\n                                    <ListGroup.Item>\r\n                                        <Button\r\n                                            type='button'\r\n                                            className='btn btn-block'\r\n                                            onClick={deliverHandler}\r\n                                        >\r\n                                            Mark As Delivered\r\n                                        </Button>\r\n                                    </ListGroup.Item>\r\n                                )}\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            )\r\n}\r\n\r\nexport default OrderScreen\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\screens\\WalletScreen.js",["226"],"import React from 'react'\r\nimport { Image, Figure } from 'react-bootstrap'\r\n\r\nfunction WalletScreen() {\r\n  return (\r\n    <>\r\n    <h2>My Wallet</h2>\r\n    <Image thumbnail className=\" position-relative\" src='https://static.vecteezy.com/system/resources/previews/005/006/009/non_2x/withdraw-money-top-up-e-wallet-concept-illustration-flat-design-eps10-modern-graphic-element-for-landing-page-empty-state-ui-infographic-icon-vector.jpg' alt=\"wallet\"></Image>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default WalletScreen","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Loader.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Paginate.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Message.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Product.js",["227","228","229"],"import React ,{useEffect} from 'react'\r\nimport { useSelector,useDispatch } from 'react-redux'\r\nimport { Card } from 'react-bootstrap'\r\nimport Rating from './Rating'\r\nimport { Link } from 'react-router-dom'\r\nimport ProductButtons from './ProductButtons'\r\nimport { listProductDetails } from '../actions/productActions'\r\n\r\nfunction Product({ match,product }) {\r\n\r\n    const cart = useSelector(state => state.cart);\r\n    const { cartItems } = cart;\r\n  \r\n    const itemInCart = cartItems.find(item => item.product === Number(product._id));\r\n    const dispatch = useDispatch()\r\n\r\n    console.log(\"product\",product._id)\r\n    console.log(\"itemInCart \",itemInCart?.product ?? \"empty\")\r\n\r\n\r\n\r\n    return (\r\n        <Card className=\"text-dark my-3 p-3 rounded\">\r\n            <Link to={`/product/${product._id}`}>\r\n                <Card.Img src={product.image} />\r\n                <div className='wishlist-heart '\r\n                 \r\n                style={{backgroundColor:'rgba(240, 241, 242, 0.5)',transition: 'transform 0.2s, opacity 0.2s' }}\r\n                >\r\n                    <i className='far fa-heart'></i>\r\n                </div>\r\n            </Link>\r\n\r\n            <Card.Body>\r\n                <Link to={`/product/${product._id}`}>\r\n                    <Card.Title as=\"div\">\r\n                        <strong className='text-dark'>{product.name}</strong>\r\n                    </Card.Title>\r\n                </Link>\r\n\r\n                <Card.Text as=\"div\">\r\n                    <div className=\"my-3\">\r\n                        <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\r\n                    </div>\r\n                </Card.Text>\r\n\r\n\r\n                <Card.Text as=\"h3\"  style={{ marginBottom: '0' , paddingBottom:'0'}}>\r\n                    ${product.price}\r\n                </Card.Text>\r\n                <Card.Text  as='small'  style={{ marginTop: '0' }}>\r\n                    available: {product.countInStock}\r\n                </Card.Text>\r\n                <ProductButtons \r\n                itemInCart={itemInCart} \r\n                product={product}\r\n                 />\r\n\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Product\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\FormContainer.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\cartConstants.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\Rating.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\ProductCarousel.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\productConstants.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\orderConstants.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\SearchBox.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\CheckoutSteps.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\constants\\userConstants.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\cartActions.js",[],"D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\productActions.js",["230"],"import axios from 'axios'\r\nimport {\r\n    PRODUCT_LIST_REQUEST,\r\n    PRODUCT_LIST_SUCCESS,\r\n    PRODUCT_LIST_FAIL,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAIL,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAIL,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAIL,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAIL,\r\n\r\n    PRODUCT_CREATE_REVIEW_REQUEST,\r\n    PRODUCT_CREATE_REVIEW_SUCCESS,\r\n    PRODUCT_CREATE_REVIEW_FAIL,\r\n\r\n\r\n    PRODUCT_TOP_REQUEST,\r\n    PRODUCT_TOP_SUCCESS,\r\n    PRODUCT_TOP_FAIL,\r\n\r\n} from '../constants/productConstants'\r\n\r\n\r\nexport const listProducts = (keyword = '') => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_LIST_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products${keyword}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const listTopProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_TOP_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/top/`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_TOP_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_TOP_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: PRODUCT_DETAILS_REQUEST })\r\n\r\n        const { data } = await axios.get(`/api/products/${id}`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/products/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/create/`,\r\n            {},\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}/`,\r\n            product,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/${productId}/reviews/`,\r\n            review,\r\n            config\r\n        )\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_SUCCESS,\r\n            payload: data,\r\n        })\r\n\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REVIEW_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\userActions.js",["231"],"import axios from 'axios'\r\nimport {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_UPDATE_PROFILE_REQUEST,\r\n    USER_UPDATE_PROFILE_SUCCESS,\r\n    USER_UPDATE_PROFILE_FAIL,\r\n    USER_UPDATE_PROFILE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n\r\n} from '../constants/userConstants'\r\n\r\nimport { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/login/',\r\n            { 'username': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const logout = () => (dispatch) => {\r\n    localStorage.removeItem('userInfo')\r\n    dispatch({ type: USER_LOGOUT })\r\n    dispatch({ type: USER_DETAILS_RESET })\r\n    dispatch({ type: ORDER_LIST_MY_RESET })\r\n    dispatch({ type: USER_LIST_RESET })\r\n}\r\n\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            { 'name': name, 'email': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/profile/update/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_PROFILE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user._id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\actions\\orderActions.js",["232","233","234"],"import axios from 'axios'\r\nimport {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_LIST_MY_REQUEST,\r\n    ORDER_LIST_MY_SUCCESS,\r\n    ORDER_LIST_MY_FAIL,\r\n    ORDER_LIST_MY_RESET,\r\n\r\n    ORDER_LIST_REQUEST,\r\n    ORDER_LIST_SUCCESS,\r\n    ORDER_LIST_FAIL,\r\n\r\n    ORDER_DELIVER_REQUEST,\r\n    ORDER_DELIVER_SUCCESS,\r\n    ORDER_DELIVER_FAIL,\r\n    ORDER_DELIVER_RESET,\r\n} from '../constants/orderConstants'\r\n\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/orders/add/`,\r\n            order,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${id}/pay/`,\r\n            paymentResult,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const deliverOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DELIVER_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${order._id}/deliver/`,\r\n            {},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DELIVER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_DELIVER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/myorders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_MY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_MY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo },\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ORDER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message,\r\n        })\r\n    }\r\n}","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\ProductButtons.js",["235","236"],"import React, { useState } from 'react';\r\nimport { Button, ButtonGroup, InputGroup } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addToCart, minusCart, removeFromCart } from '../actions/cartActions';\r\n\r\n\r\n\r\n\r\nconst ProductButtons = ({ itemInCart, product, inputGroupClass, addToCartClass, plusClass, minusClass, countClass, trashIcon }) => {\r\n\r\n    const dispatch = useDispatch();\r\n    const [qty, setQty] = useState(1);\r\n\r\n    const addToCartHandler = () => {\r\n        dispatch(addToCart(product._id, Number(qty)));\r\n    };\r\n\r\n    const minusCartHandler = () => {\r\n        dispatch(minusCart(product._id));\r\n    };\r\n\r\n    const removeItemHandler = () => {\r\n        dispatch(removeFromCart(product._id));\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            {!itemInCart || itemInCart.qty <= 0 ? (\r\n                <Button\r\n                    onClick={addToCartHandler}\r\n                    className={addToCartClass? addToCartClass : 'btn-block'}\r\n                    disabled={product.countInStock === 0}\r\n                    type='button'\r\n                >\r\n                    Add to Cart\r\n                </Button>\r\n            ) : (\r\n                <InputGroup className={\r\n                    inputGroupClass ? inputGroupClass : \r\n                    'd-flex flex-nowrap align-items-center justify-content-between text-center'}>\r\n                    <Button\r\n                        onClick={itemInCart.qty > 1 ? minusCartHandler : removeItemHandler}\r\n                        className={minusClass? minusClass : \"btn\"}\r\n                        disabled={product.countInStock === 0}\r\n                        type='button'\r\n                    >\r\n                        <i className={`fas fa-${itemInCart.qty > 1 ? 'minus' : trashIcon? trashIcon: 'trash'}`}></i>\r\n                    </Button>\r\n                    <span className='bg-transparent w-auto '>{itemInCart.qty}</span>\r\n                    <Button\r\n                        onClick={addToCartHandler}\r\n                        className={plusClass? plusClass : \"btn\"}\r\n                        disabled={product.countInStock <= itemInCart.qty}\r\n                        type='button'\r\n                    >\r\n                        <i className='fas fa-plus'></i>\r\n                    </Button>\r\n                </InputGroup>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProductButtons;\r\n","D:\\Projects\\Django\\clones\\ALmasilaKart_v2\\frontend\\src\\components\\CategoryCard.js",[],{"ruleId":"237","replacedBy":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"245","line":4,"column":58,"nodeType":"243","messageId":"244","endLine":4,"endColumn":69},{"ruleId":"241","severity":1,"message":"246","line":4,"column":70,"nodeType":"243","messageId":"244","endLine":4,"endColumn":80},{"ruleId":"241","severity":1,"message":"247","line":4,"column":38,"nodeType":"243","messageId":"244","endLine":4,"endColumn":42},{"ruleId":"241","severity":1,"message":"248","line":6,"column":37,"nodeType":"243","messageId":"244","endLine":6,"endColumn":50},{"ruleId":"241","severity":1,"message":"249","line":2,"column":10,"nodeType":"243","messageId":"244","endLine":2,"endColumn":14},{"ruleId":"250","severity":1,"message":"251","line":53,"column":22,"nodeType":"252","messageId":"253","endLine":53,"endColumn":24},{"ruleId":"241","severity":1,"message":"254","line":3,"column":34,"nodeType":"243","messageId":"244","endLine":3,"endColumn":37},{"ruleId":"241","severity":1,"message":"255","line":3,"column":51,"nodeType":"243","messageId":"244","endLine":3,"endColumn":56},{"ruleId":"256","severity":1,"message":"257","line":25,"column":29,"nodeType":"258","endLine":25,"endColumn":157},{"ruleId":"241","severity":1,"message":"259","line":1,"column":27,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"250","severity":1,"message":"251","line":34,"column":22,"nodeType":"252","messageId":"253","endLine":34,"endColumn":24},{"ruleId":"241","severity":1,"message":"242","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"260","severity":1,"message":"261","line":35,"column":8,"nodeType":"262","endLine":35,"endColumn":26,"suggestions":"263"},{"ruleId":"241","severity":1,"message":"259","line":1,"column":27,"nodeType":"243","messageId":"244","endLine":1,"endColumn":36},{"ruleId":"241","severity":1,"message":"264","line":2,"column":62,"nodeType":"243","messageId":"244","endLine":2,"endColumn":69},{"ruleId":"241","severity":1,"message":"265","line":2,"column":71,"nodeType":"243","messageId":"244","endLine":2,"endColumn":78},{"ruleId":"260","severity":1,"message":"266","line":43,"column":8,"nodeType":"262","endLine":43,"endColumn":46,"suggestions":"267"},{"ruleId":"241","severity":1,"message":"242","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"242","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"242","line":1,"column":17,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"260","severity":1,"message":"268","line":65,"column":8,"nodeType":"262","endLine":65,"endColumn":62,"suggestions":"269"},{"ruleId":"241","severity":1,"message":"270","line":2,"column":17,"nodeType":"243","messageId":"244","endLine":2,"endColumn":23},{"ruleId":"241","severity":1,"message":"259","line":1,"column":16,"nodeType":"243","messageId":"244","endLine":1,"endColumn":25},{"ruleId":"241","severity":1,"message":"271","line":7,"column":10,"nodeType":"243","messageId":"244","endLine":7,"endColumn":28},{"ruleId":"241","severity":1,"message":"272","line":15,"column":11,"nodeType":"243","messageId":"244","endLine":15,"endColumn":19},{"ruleId":"241","severity":1,"message":"273","line":117,"column":17,"nodeType":"243","messageId":"244","endLine":117,"endColumn":21},{"ruleId":"241","severity":1,"message":"274","line":21,"column":5,"nodeType":"243","messageId":"244","endLine":21,"endColumn":30},{"ruleId":"241","severity":1,"message":"275","line":14,"column":5,"nodeType":"243","messageId":"244","endLine":14,"endColumn":20},{"ruleId":"241","severity":1,"message":"276","line":19,"column":5,"nodeType":"243","messageId":"244","endLine":19,"endColumn":24},{"ruleId":"241","severity":1,"message":"277","line":28,"column":5,"nodeType":"243","messageId":"244","endLine":28,"endColumn":24},{"ruleId":"241","severity":1,"message":"245","line":2,"column":18,"nodeType":"243","messageId":"244","endLine":2,"endColumn":29},{"ruleId":"241","severity":1,"message":"278","line":12,"column":17,"nodeType":"243","messageId":"244","endLine":12,"endColumn":23},"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'ButtonGroup' is defined but never used.","'InputGroup' is defined but never used.","'Form' is defined but never used.","'listCartItems' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Row' is defined but never used.","'Image' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["281"],"'Overlay' is defined but never used.","'Tooltip' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["282"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["283"],"'Figure' is defined but never used.","'listProductDetails' is defined but never used.","'dispatch' is assigned a value but never used.","'data' is assigned a value but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'setQty' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"290","text":"291"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"292","text":"293"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"294","text":"295"},[1314,1332],"[success, history, order._id, dispatch]",[1474,1512],"[user, userId, successUpdate, history, dispatch]",[2336,2390],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]"]